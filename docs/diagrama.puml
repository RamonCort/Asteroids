@startuml AsteroidsGameDiagram

!theme plain
skinparam backgroundColor #F8F8F8
skinparam classBackgroundColor #FFFFFF
skinparam classBorderColor #333333
skinparam classArrowColor #666666

' === CLASES PRINCIPALES ===

class Ventana {
    - window : sf::RenderWindow
    - texture : sf::Texture
    - sprite : sf::Sprite
    - font : sf::Font
    - errorText : sf::Text
    - fontLoaded : bool
    - music : sf::Music
    + Ventana(width : int, height : int)
    + Mostrar() : void
    + MostrarInicio() : void
}

abstract class Nave {
    # texture : sf::Texture
    # sprite : sf::Sprite
    # velocidad : float
    # particulas : vector<ParticulaRastro>
    # posicionAnterior : sf::Vector2f
    # seEstaMoviendo : bool
    # tieneRastro : bool
    + Nave(x : float, y : float, ruta : string)
    + Dibujar(window : sf::RenderWindow&) : void
    + Mover(window : sf::RenderWindow&) : void
    + ApuntarHaciaMouse(window : sf::RenderWindow&) : void
    + ObtenerSprite() : sf::Sprite&
    + ObtenerVelocidad() : float
    + EstablecerVelocidad(v : float) : void
    + ObtenerAngulo() : float
    + ActualizarRastro() : void
    + DibujarRastro(window : sf::RenderWindow&) : void
}

class AstroNave {
    + AstroNave(x : float, y : float)
}

struct ParticulaRastro {
    + posicion : sf::Vector2f
    + vida : float
    + alpha : sf::Uint8
    + ParticulaRastro(pos : sf::Vector2f)
}

class Asteroide {
    + shape : sf::CircleShape
    + x : float
    + y : float
    + velocidadX : float
    + velocidadY : float
    + tamano : TamanoAsteroide
    + sprite : sf::Sprite
    + {static} textureAsteroide : sf::Texture
    + {static} textureCargada : bool
    + Asteroide(x : float, y : float, tam : TamanoAsteroide, targetX : float, targetY : float)
    + ObtenerX() : float
    + ObtenerY() : float
    + Dibujar(window : sf::RenderWindow&) : void
    + Mover(limiteY : float, limiteX : float, velocidadBase : float) : void
    + MoverHaciaObjetivo(posicionNave : sf::Vector2f&, limiteY : float, limiteX : float, velocidadBase : float) : void
    + Colisionar(nave : Nave&) : void
    + ColisionarConNave(nave : Nave&) : bool
    + ColisionarConMisil(misil : Misil&) : bool
    + ReiniciarPosicion(limiteX : float, limiteY : float) : void
    + Dividir() : vector<Asteroide>
    + ObtenerTamano() : TamanoAsteroide
    + PuedeDestruirse() : bool
}

enum TamanoAsteroide {
    GRANDE
    PEQUENO
}

class Misil {
    - shape : sf::RectangleShape
    - {static} texturaDisparo : sf::Texture
    - spriteDisparo : sf::Sprite
    - velocidad : float
    - anguloDisparo : float
    - direccion : sf::Vector2f
    - frameActual : int
    - totalFrames : int
    - framesPorFila : int
    - frameWidth : int
    - frameHeight : int
    - tiempoPorFrame : float
    - relojAnimacion : sf::Clock
    + Misil(x : float, y : float, angulo : float)
    + Mover() : void
    + Dibujar(window : sf::RenderWindow&) : void
    + FueraDePantalla(altoVentana : float) : bool
    + ObtenerLimites() : sf::FloatRect
}

class Explosion {
    - {static} texture : sf::Texture
    - {static} textureLoaded : bool
    - sprite : sf::Sprite
    - frameActual : int
    - totalFrames : int
    - framesPorFila : int
    - frameWidth : int
    - frameHeight : int
    - tiempoPorFrame : float
    - relojAnimacion : sf::Clock
    - finished : bool
    - anchoTotal : int
    - anchoFrameFila2 : int
    + Explosion(x : float, y : float)
    + Actualizar() : void
    + Dibujar(window : sf::RenderWindow&) : void
    + EstaTerminada() : bool
}

class Vida {
    - box : sf::RectangleShape
    - font : sf::Font
    - texto : sf::Text
    - width : float
    - height : float
    + Vida()
    + EstablecerVidas(vidas : int) : void
    + Dibujar(window : sf::RenderWindow&) : void
}

class Puntaje {
    - box : sf::RectangleShape
    - font : sf::Font
    - texto : sf::Text
    - width : float
    - height : float
    + Puntaje(windowWidth : float)
    + EstablecerPuntos(puntos : int) : void
    + Dibujar(window : sf::RenderWindow&) : void
}

class Punto {
    - puntos : int
    + Punto()
    + Sumar() : void
    + Sumar(valor : int) : void
    + ObtenerPuntos() : int
}

class Oportunidad {
    - oportunidades : int
    - vidas : int
    - vidasPorOportunidad : int
    + Oportunidad(oportunidades : int, vidasPorOportunidad : int)
    + PerderVida() : void
    + ObtenerVidas() : int
    + ObtenerOportunidades() : int
    + SinOportunidades() : bool
    + Reiniciar() : void
    + SumarVida() : void
}

' === ITEMS ===

abstract class Item {
    # x : float
    # y : float
    + Mover(limiteY : float, limiteX : float, velocidadY : float) : void
    + Dibujar(window : sf::RenderWindow&) : void
    + ObtenerY() : float
    + ObtenerX() : float
    + Reiniciar(limiteX : float) : void
}

class EscudoItem {
    - shape : sf::CircleShape
    - spriteTexture : sf::Texture
    - spriteEscudo : sf::Sprite
    + EscudoItem(x : float, y : float)
    + Mover(limiteY : float, limiteX : float, velocidadY : float) : void
    + Dibujar(window : sf::RenderWindow&) : void
    + Colisionar(nave : Nave&) : bool
    + Reiniciar(limiteX : float) : void
    + ObtenerY() : float
    + ObtenerX() : float
    + EstablecerX(nx : float) : void
    + EstablecerY(ny : float) : void
    + EstablecerPosicion(nx : float, ny : float) : void
}

class DobleDisparoItem {
    - textura : sf::Texture
    - sprite : sf::Sprite
    - angulo : float
    - velocidadRotacion : float
    - direccionRotacion : int
    - relojCambioDireccion : sf::Clock
    + DobleDisparoItem(x : float, y : float)
    + Mover(limiteY : float, limiteX : float, velocidadY : float) : void
    + Dibujar(window : sf::RenderWindow&) : void
    + Colisionar(naveSprite : sf::Sprite&) : bool
    + Reiniciar(limiteX : float) : void
    + ObtenerY() : float
    + ObtenerX() : float
    + EstablecerPosicion(nx : float, ny : float) : void
}

class VidaExtra {
    - shape : sf::CircleShape
    - corazonTexture : sf::Texture
    - corazonSprite : sf::Sprite
    - spriteTexture : sf::Texture
    - spriteAnimado : sf::Sprite
    - angulo : float
    - velocidadRotacion : float
    - direccionRotacion : int
    - relojCambioDireccion : sf::Clock
    + VidaExtra(x : float, y : float)
    + Mover(limiteY : float, limiteX : float, velocidadY : float) : void
    + Dibujar(window : sf::RenderWindow&) : void
    + Colisionar(nave : Nave&) : bool
    + Reiniciar(limiteX : float) : void
    + ObtenerY() : float
    + ObtenerX() : float
    + EstablecerX(nx : float) : void
    + EstablecerY(ny : float) : void
    + EstablecerPosicion(nx : float, ny : float) : void
}

' === UTILIDADES ===

class Margen {
    - lineaSuperior : sf::RectangleShape
    - lineaInferior : sf::RectangleShape
    - lineaIzquierda : sf::RectangleShape
    - lineaDerecha : sf::RectangleShape
    - esquinaSupIzq : sf::CircleShape
    - esquinaSupDer : sf::CircleShape
    - esquinaInfIzq : sf::CircleShape
    - esquinaInfDer : sf::CircleShape
    - ancho : float
    - alto : float
    - grosor : float
    + Margen(anchoVentana : float, altoVentana : float, grosor : float)
    + Dibujar(window : sf::RenderWindow&) : void
    + Limitar(nave : Nave&) : void
}

class TablaDePuntaje {
    - archivo_ : string
    - entradas : vector<Entrada>
    + TablaDePuntaje(archivo : string)
    + Agregar(nombre : string, puntaje : int) : void
    + Obtener() : vector<Entrada>&
    - Cargar() : void
    - Guardar() : void
}

class Entrada {
    + nombre : string
    + puntaje : int
}

class AgujeroDeGusano {
    + AgujeroDeGusano()
}

' === RELACIONES ===

' Herencia
AstroNave --|> Nave : extends
EscudoItem --|> Item : extends
DobleDisparoItem --|> Item : extends
VidaExtra --|> Item : extends

' Composición (componentes fuertes)
Nave *-- "0..*" ParticulaRastro : contiene
TablaDePuntaje *-- "0..*" Entrada : contiene
Asteroide *-- "1" TamanoAsteroide : tiene

' Agregación (componentes débiles)
Ventana o-- "1" Nave : usa
Ventana o-- "0..*" Misil : maneja
Ventana o-- "0..*" Asteroide : maneja
Ventana o-- "0..*" Explosion : maneja
Ventana o-- "1" Vida : usa
Ventana o-- "1" Puntaje : usa
Ventana o-- "1" Punto : usa
Ventana o-- "1" Oportunidad : usa
Ventana o-- "1" Margen : usa
Ventana o-- "1" TablaDePuntaje : usa
Ventana o-- "0..1" EscudoItem : maneja
Ventana o-- "0..1" DobleDisparoItem : maneja
Ventana o-- "0..1" VidaExtra : maneja

' Dependencias
Nave ..> Misil : crea
Asteroide ..> Nave : colisiona_con
Asteroide ..> Misil : colisiona_con
EscudoItem ..> Nave : colisiona_con
DobleDisparoItem ..> Nave : colisiona_con
VidaExtra ..> Nave : colisiona_con
Margen ..> Nave : limita
Explosion ..> Asteroide : creada_por_destruccion

' Asociaciones
Puntaje -- Punto : actualiza
Vida -- Oportunidad : refleja

note top of Ventana : Clase principal que maneja\nel bucle del juego y\nla lógica de colisiones

note top of Nave : Clase base abstracta para\ntodos los tipos de naves

note right of Item : Clase base para todos\nlos objetos coleccionables

note bottom of TamanoAsteroide : Enum que define\nlos tamaños de asteroides

@enduml